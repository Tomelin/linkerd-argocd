---
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd-jaeger
  labels:
    linkerd.io/extension: jaeger
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-jaeger
  name: proxy-admin
  labels:
    linkerd.io/extension: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.3
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: jaeger
  port: linkerd-admin
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-jaeger
  name: proxy-admin
  labels:
    linkerd.io/extension: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.3
spec:
  server:
    name: proxy-admin
  client:
    # for kubelet probes
    unauthenticated: true

---
###
### Jaeger Injector
###
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    linkerd.io/extension: jaeger
    app.kubernetes.io/name: jaeger-injector
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.12.3
    component: jaeger-injector
  name: jaeger-injector
  namespace: linkerd-jaeger
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: jaeger
      component: jaeger-injector
  template:
    metadata:
      annotations:
        checksum/config: c769cc11f300960589ded3715efa6b4f1788c635a6aba6dbe59410eeb20c0b71
        linkerd.io/inject: enabled
        config.linkerd.io/proxy-await: "enabled"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: jaeger
        component: jaeger-injector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - -collector-svc-addr=collector.linkerd-jaeger:55678
        - -collector-svc-account=collector
        - -log-level=info
        - -cluster-domain=cluster.local
        - -linkerd-namespace=linkerd
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/jaeger-webhook:stable-2.12.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: jaeger-injector
        ports:
        - containerPort: 8443
          name: jaeger-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
        resources:
      serviceAccountName: jaeger-injector
      volumes:
      - name: tls
        secret:
          secretName: jaeger-injector-k8s-tls
---
kind: Service
apiVersion: v1
metadata:
  name: jaeger-injector
  namespace: linkerd-jaeger
  labels:
    linkerd.io/extension: jaeger
    component: jaeger-injector
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: jaeger
    component: jaeger-injector
  ports:
  - name: jaeger-injector
    port: 443
    targetPort: jaeger-injector
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-jaeger
  name: jaeger-injector-webhook
  labels:
    linkerd.io/extension: jaeger
    component: jaeger-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.3
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: jaeger
      component: jaeger-injector
  port: jaeger-injector
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-jaeger
  name: jaeger-injector-admin
  labels:
    linkerd.io/extension: jaeger
    component: jaeger-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.3
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: jaeger
      component: jaeger-injector
  port: admin-http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-jaeger
  name: jaeger-injector
  labels:
    linkerd.io/extension: jaeger
    component: jaeger-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.3
spec:
  server:
    selector:
      matchLabels:
        linkerd.io/extension: jaeger
        component: jaeger-injector
  client:
    # traffic coming from the kubelet and from kube-api
    unauthenticated: true
---
###
### collector RBAC
###
kind: ServiceAccount
apiVersion: v1
metadata:
  name: collector
  namespace: linkerd-jaeger
---
###
### Jaeger Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-jaeger-injector
  labels:
    linkerd.io/extension: jaeger
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-jaeger-injector
  labels:
    linkerd.io/extension: jaeger
subjects:
- kind: ServiceAccount
  name: jaeger-injector
  namespace: linkerd-jaeger
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: linkerd-jaeger-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: jaeger-injector
  namespace: linkerd-jaeger
---
kind: Secret
apiVersion: v1
metadata:
  name: jaeger-injector-k8s-tls
  namespace: linkerd-jaeger
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVekNDQWp1Z0F3SUJBZ0lSQUlQbGNqa1ozeTc4R2ZielZnc0lxa0F3RFFZSktvWklodmNOQVFFTEJRQXcKTFRFck1Da0dBMVVFQXhNaWFtRmxaMlZ5TFdsdWFtVmpkRzl5TG14cGJtdGxjbVF0YW1GbFoyVnlMbk4yWXpBZQpGdzB5TXpBeE1UQXhNREU0TkRaYUZ3MHlOREF4TVRBeE1ERTRORFphTUMweEt6QXBCZ05WQkFNVEltcGhaV2RsCmNpMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xXcGhaV2RsY2k1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRREluMHFiMXhsUk0zTFJsMG1Dd2VxOGRJaVFoZHNtMmdSSGVIcjJ5SGVtak1URgpsS3ovK0pTQ3hyOUZKY1BMQVFtWHNRVUovWEdZdXBqai9LSnFHZDBsdmU1elhvUmlJQURNZFh0WnNJUTh4WFRoCnM0by9KamxPQjFyNGlMVXMwSVdnMSs3RFdhQU13bFJBcU9FSFV4cEtiSzhRMEwvS0JISzdvQWxXeHBvYkQrWEcKUXpzaWJRWWx5aVNTeXZiaHBDeUxabEg5QmI0T3RrQUJob1RKOHAxV0t1Nk43ak9sL0lQVCtEVnQvYVM3SEg3SwpnR3pMWVVSWHJqUUdkTU42QUZNbWIvUzFKWDA0dDVwOTh2cWo4cXhwZjZpdmxCaHYxSGpwZDJETzd4SDNjMXhKCnlDcUhpZzlCSjJHNHNxZEpNdXB1d2tSN3A1NE52bTZDTmxQRlNtRURBZ01CQUFHamJqQnNNQTRHQTFVZER3RUIKL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFILwpCQUl3QURBdEJnTlZIUkVFSmpBa2dpSnFZV1ZuWlhJdGFXNXFaV04wYjNJdWJHbHVhMlZ5WkMxcVlXVm5aWEl1CmMzWmpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFiaFp2ci9NY05HWExIRzMrTTJOc2wxbnBxWlduRUVTaTUKZFNRN3R5LzEyUHFUNTdCRjFtMXlYcHBVdk0wRjNYU3hDVzFEZlY3VER1VU1aM2RXa2tBL0JJdVRud2lBZDZscQp4aVZyZHROY1ZaNGVDdUNrdVV1T2YrV0ZpN1ZrZExORm5YVTk5TGZrOWpOWWluRmVHSkczVTdrY2ZkZlBLQWJDClpLUmtVMVFGN0FFVHpmeExBTjFWSmhTazVtNnh4U2drcnRBaVJkOGo3UGdKRHBOYytGU0o1Tzg0S1U1eVNyeEQKajNsdEwrb3N2Mk9RNjdWUnpLVXlwRUJnZEN4QThIZHZRV2xhbUhPTmk4amlFUTJCK3lxOHdLN29hYndYU1BYcwpGM3JFNUxLMERCaFVBVFF1bzJ5UVRLSUpDbGxxdGtpT256aEpSWndJVDQ5UGJ1OFpHa3lKCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBeUo5S205Y1pVVE55MFpkSmdzSHF2SFNJa0lYYkp0b0VSM2g2OXNoM3BvekV4WlNzCi8vaVVnc2EvUlNYRHl3RUpsN0VGQ2YxeG1McVk0L3lpYWhuZEpiM3VjMTZFWWlBQXpIVjdXYkNFUE1WMDRiT0sKUHlZNVRnZGErSWkxTE5DRm9OZnV3MW1nRE1KVVFLamhCMU1hU215dkVOQy95Z1J5dTZBSlZzYWFHdy9seGtNNwpJbTBHSmNva2tzcjI0YVFzaTJaUi9RVytEclpBQVlhRXlmS2RWaXJ1amU0enBmeUQwL2cxYmYya3V4eCt5b0JzCnkyRkVWNjQwQm5URGVnQlRKbS8wdFNWOU9MZWFmZkw2by9Lc2FYK29yNVFZYjlSNDZYZGd6dThSOTNOY1NjZ3EKaDRvUFFTZGh1TEtuU1RMcWJzSkVlNmVlRGI1dWdqWlR4VXBoQXdJREFRQUJBb0lCQVFDRkU2U1oyd1NnS0ZCeApWcmtjVXlVeC9OclpndkRyeEpJeUZtajZhZDkwU3N2N2c3TjkxNVlyYVVwV3c4WXNVblBhZTBHc2JzRjdYY3NzCjc5ZU1LYnZYM1RUZXNrTitFMXgwUXptZk5NZUN5RGZQdnhoazZ5WDM3RWtic3hMNnR4YnNxazltcFh6VStkS0oKVVh4ekwxeXhJWWErMExsbmQ2dmphVFRJcXRSdVBlQ3RpOE53TDVDbGk3UmNNdExxMndnem52UGVPZWpYQzJ0dQpIZTNsU3A4SWQzOC9ZL1F1UUtvTmFNd09GbmFYbzk5U0lUajdyUDdhc2ZhWmdUeWcrSjIwZGVSaExZVG1vaUtzCmtLQmRkK0s3S2xlYm9WTW4xNUNNVWt3WEZpQVo1aENyUXFNWHE0cDRKeStGWU4xRmxyOVdHWXpQRXdLY3ljNE0KWlpuOVRoVUJBb0dCQU9YRzBOMGlySDhHQnhuVnFqMzZKU3V3SnpMY0gwS2wzRVNpWnJDRmxHUmJwMWt2bEdjWQp2ZU50VjcwU1pQMXY3V0cwWjE5ckJaQW11ZEZiQlc3R21rbEFnQ1dpOTdSV1Y2b3FuR20ydTNJUExSQlpnS05rClhPdHJQRThMNzlXMjBGWUNmN09kdUF5cndXYW5JTDFPamdCV0xZRW02VU1IYnlLdjlDVzh0WjVMQW9HQkFOK0UKc202Ykd4SGg0VHFPaWtGeDYyOHlwRjJkTVJCZVJnb2JzMmRUOVd3M2gvZHBvM1dTZmhVL09iYUE1S21wRDdKawpaSTF4R0MzaFZTU3kxUTNWU1pkdnF1Ri9McGpPaS9yS3NvdGc5eWYyTHE0cEZHZ1ZHOU5oOHBBKytzTytNcVp5Cmd1UStjSHBwWXh2Z3dzeWpYeEUzYnZhSmFoeU9rMEtsTXZqNE83VXBBb0dBYmZDRHJOclRSKytkWkNvTVM1MHQKUGNzSjVsYldDakNMeExjamhTQlUwUFBkalZtcm11eUdwcE9Cb0hCMXE2RnJKZzJJVEdwTGZoNVpXQ2RCNFMvYgpVR014TFZEZFRnYmw2UUI4V0VSYlNZYWpYQ2hHMldiQzRzMHJUUEw4TFBoTWxHcWJxVmcwWUxPcFZMRndnOE5iClJDUDNuOHo3WE52b3UrTU9ZU1A2amlNQ2dZRUExRTBOemRDMUhYOFdscS9jMGR5S2Fzd0hJb096bm9Cc3RoMHAKZ2ZOVklMeCtBSm51RURaY1c0SDZKMGExNmhBU1FMYnFhdzRJa1V0OXU2WEFoNnNXZ3lnbGZwbDJnTjF1UjM5UApwdU1xM21JT1pJM1FQQ3dRaWU1Mm5sdXpnMGljZzB3dzF1b1htNjJOM1dUV29kaHE2OGRqTmZlL09mQ1NIck1hCmZ6QUlSa0VDZ1lBZWlKRVhpaGF3UVo5bXNRMm5ERitxOFBhb2tkVUxUMnYzZFpnSEJzTXN2QkVWSHhGaTdpNkIKQUozUHFhSEl2VVMrYy9ZaWxSSWhKbEs3QmZsVmR0MGVqYW1wNDB4c3Nad3FIVlRtdm13a29vMG1SVUhDVkNWRgpsS1pYWnRKOVI3Q051MzB1bmRuQitUTlFxTUZ1cndSaXB2WTNnbVR2QThCWUFpU0RmTzRlWWc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-jaeger-injector-webhook-config
  labels:
    linkerd.io/extension: jaeger
webhooks:
- name: jaeger-injector.linkerd.io
  clientConfig:
    service:
      name: jaeger-injector
      namespace: linkerd-jaeger
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVekNDQWp1Z0F3SUJBZ0lSQUlQbGNqa1ozeTc4R2ZielZnc0lxa0F3RFFZSktvWklodmNOQVFFTEJRQXcKTFRFck1Da0dBMVVFQXhNaWFtRmxaMlZ5TFdsdWFtVmpkRzl5TG14cGJtdGxjbVF0YW1GbFoyVnlMbk4yWXpBZQpGdzB5TXpBeE1UQXhNREU0TkRaYUZ3MHlOREF4TVRBeE1ERTRORFphTUMweEt6QXBCZ05WQkFNVEltcGhaV2RsCmNpMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xXcGhaV2RsY2k1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRREluMHFiMXhsUk0zTFJsMG1Dd2VxOGRJaVFoZHNtMmdSSGVIcjJ5SGVtak1URgpsS3ovK0pTQ3hyOUZKY1BMQVFtWHNRVUovWEdZdXBqai9LSnFHZDBsdmU1elhvUmlJQURNZFh0WnNJUTh4WFRoCnM0by9KamxPQjFyNGlMVXMwSVdnMSs3RFdhQU13bFJBcU9FSFV4cEtiSzhRMEwvS0JISzdvQWxXeHBvYkQrWEcKUXpzaWJRWWx5aVNTeXZiaHBDeUxabEg5QmI0T3RrQUJob1RKOHAxV0t1Nk43ak9sL0lQVCtEVnQvYVM3SEg3SwpnR3pMWVVSWHJqUUdkTU42QUZNbWIvUzFKWDA0dDVwOTh2cWo4cXhwZjZpdmxCaHYxSGpwZDJETzd4SDNjMXhKCnlDcUhpZzlCSjJHNHNxZEpNdXB1d2tSN3A1NE52bTZDTmxQRlNtRURBZ01CQUFHamJqQnNNQTRHQTFVZER3RUIKL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFILwpCQUl3QURBdEJnTlZIUkVFSmpBa2dpSnFZV1ZuWlhJdGFXNXFaV04wYjNJdWJHbHVhMlZ5WkMxcVlXVm5aWEl1CmMzWmpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFiaFp2ci9NY05HWExIRzMrTTJOc2wxbnBxWlduRUVTaTUKZFNRN3R5LzEyUHFUNTdCRjFtMXlYcHBVdk0wRjNYU3hDVzFEZlY3VER1VU1aM2RXa2tBL0JJdVRud2lBZDZscQp4aVZyZHROY1ZaNGVDdUNrdVV1T2YrV0ZpN1ZrZExORm5YVTk5TGZrOWpOWWluRmVHSkczVTdrY2ZkZlBLQWJDClpLUmtVMVFGN0FFVHpmeExBTjFWSmhTazVtNnh4U2drcnRBaVJkOGo3UGdKRHBOYytGU0o1Tzg0S1U1eVNyeEQKajNsdEwrb3N2Mk9RNjdWUnpLVXlwRUJnZEN4QThIZHZRV2xhbUhPTmk4amlFUTJCK3lxOHdLN29hYndYU1BYcwpGM3JFNUxLMERCaFVBVFF1bzJ5UVRLSUpDbGxxdGtpT256aEpSWndJVDQ5UGJ1OFpHa3lKCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  sideEffects: None
---
###
### jaeger RBAC
###
kind: ServiceAccount
apiVersion: v1
metadata:
  name: jaeger
  namespace: linkerd-jaeger
---
###
### Tracing Collector Service
###
apiVersion: v1
kind: ConfigMap
metadata:
  name: collector-config
  namespace: linkerd-jaeger
  labels:
    linkerd.io/extension: jaeger
    component: collector
data:
  collector-config: |
    receivers:
      otlp:
        protocols:
          grpc:
          http:
      opencensus:
      zipkin:
      jaeger:
        protocols:
          grpc:
          thrift_http:
          thrift_compact:
          thrift_binary:
    processors:
      batch:
    extensions:
      health_check:
    exporters:
      jaeger:
        endpoint: jaeger.${POD_NAMESPACE}:14250
        tls:
          insecure: true
    service:
      extensions: [health_check]
      pipelines:
        traces:
          receivers: [otlp,opencensus,zipkin,jaeger]
          processors: [batch]
          exporters: [jaeger]
---
apiVersion: v1
kind: Service
metadata:
  name: collector
  namespace: linkerd-jaeger
  labels:
    linkerd.io/extension: jaeger
    component: collector
spec:
  type: ClusterIP
  ports:
  - name: otlp
    port: 4317
    protocol: TCP
    targetPort: 4317
  - name: opencensus
    port: 55678
    protocol: TCP
    targetPort: 55678
  - name: zipkin
    port: 9411
    protocol: TCP
    targetPort: 9411
  - name: jaeger-thrift
    port: 14268
    protocol: TCP
    targetPort: 14268
  - name: jaeger-grpc
    port: 14250
    protocol: TCP
    targetPort: 14250
  selector:
    component: collector
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    linkerd.io/extension: jaeger
    app.kubernetes.io/name: collector
    app.kubernetes.io/part-of: Linkerd
    component: collector
  name: collector
  namespace: linkerd-jaeger
spec:
  replicas: 1
  selector:
    matchLabels:
      component: collector
  minReadySeconds: 5
  progressDeadlineSeconds: 120
  template:
    metadata:
      annotations:
        linkerd.io/inject: enabled
        config.linkerd.io/proxy-await: "enabled"
        prometheus.io/path: /metrics
        prometheus.io/port: "8888"
        prometheus.io/scrape: "true"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: jaeger
        component: collector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - command:
        - /otelcol
        - --config=/conf/collector-config.yaml
        env:
        - name: GOGC
          value: "80"
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        image: otel/opentelemetry-collector:0.43.0
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /
            port: 13133
        name: ot-collector
        ports:
        - containerPort: 13133
        - containerPort: 4317
        - containerPort: 55678
        - containerPort: 9411
        - containerPort: 14268
        - containerPort: 14250
        - containerPort: 8888
        readinessProbe:
          httpGet:
            path: /
            port: 13133
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /conf
          name: collector-config-val
      serviceAccountName: collector
      volumes:
      - configMap:
          items:
          - key: collector-config
            path: collector-config.yaml
          name: collector-config
        name: collector-config-val
---
###
### Tracing Jaeger Service
###
apiVersion: v1
kind: Service
metadata:
  name: jaeger
  namespace: linkerd-jaeger
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
spec:
  type: ClusterIP
  selector:
    component: jaeger
  ports:
    - name: collection
      port: 14268
    - name: grpc
      port: 14250
    - name: ui
      port: 16686
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    linkerd.io/extension: jaeger
    app.kubernetes.io/name: jaeger
    app.kubernetes.io/part-of: Linkerd
    component: jaeger
  name: jaeger
  namespace: linkerd-jaeger
spec:
  replicas: 1
  selector:
    matchLabels:
      component: jaeger
  template:
    metadata:
      annotations:
        linkerd.io/inject: enabled
        config.linkerd.io/proxy-await: "enabled"
        prometheus.io/path: /metrics
        prometheus.io/port: "14269"
        prometheus.io/scrape: "true"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: jaeger
        component: jaeger
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - --query.base-path=/jaeger
        image: jaegertracing/all-in-one:1.31
        imagePullPolicy: Always
        name: jaeger
        ports:
        - containerPort: 14269
          name: admin
        - containerPort: 14268
          name: collection
        - containerPort: 14250
          name: grpc
        - containerPort: 16686
          name: ui
        resources:
        securityContext:
          runAsUser: 2103
      dnsPolicy: ClusterFirst
      serviceAccountName: jaeger
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-jaeger
  name: collector-otlp
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.3
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 4317
  proxyProtocol: gRPC
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-jaeger
  name: collector-opencensus
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.3
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 55678
  proxyProtocol: gRPC
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-jaeger
  name: collector-zipkin
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.3
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 9411
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-jaeger
  name: collector-jaeger-thrift
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.3
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 14268
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-jaeger
  name: collector-jaeger-grpc
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.3
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 14250
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-jaeger
  name: collector-admin
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.3
spec:
  podSelector:
    matchLabels:
      component: collector
  port: 13133
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-jaeger
  name: collector
  labels:
    linkerd.io/extension: jaeger
    component: collector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.3
spec:
  server:
    selector:
      matchLabels:
        linkerd.io/extension: jaeger
        component: collector
  client:
    # allow connections from any pod (meshed or not) sending trace data
    unauthenticated: true
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-jaeger
  name: jaeger-grpc
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.3
spec:
  podSelector:
    matchLabels:
      component: jaeger
  port: grpc
  proxyProtocol: gRPC
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-jaeger
  name: jaeger-grpc
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.3
spec:
  server:
    name: jaeger-grpc
  client:
    meshTLS:
      serviceAccounts:
      - name: collector
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-jaeger
  name: jaeger-admin
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.3
spec:
  podSelector:
    matchLabels:
      component: jaeger
  port: admin
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-jaeger
  name: jaeger-admin
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.3
spec:
  server:
    name: jaeger-admin
  client:
    meshTLS:
      serviceAccounts:
      # if not using linkerd-viz' prometheus, replace its SA here
      - name: prometheus
        namespace: linkerd-viz
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-jaeger
  name: jaeger-ui
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.3
spec:
  podSelector:
    matchLabels:
      component: jaeger
  port: ui
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1beta1
kind: ServerAuthorization
metadata:
  namespace: linkerd-jaeger
  name: jaeger-ui
  labels:
    linkerd.io/extension: jaeger
    component: jaeger
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.3
spec:
  server:
    name: jaeger-ui
  client:
    meshTLS:
      serviceAccounts:
      # for the optional dashboard integration
      - name: web
        namespace: linkerd-viz
